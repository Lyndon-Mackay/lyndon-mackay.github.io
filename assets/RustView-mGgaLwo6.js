import{d as r,c as s,a as e,n as t,u as a,b as n,F as l,o as i,e as o}from"./index-BMaIqeJl.js";const d=e("p",null,[n(" After coming across the Rust parsing framework "),e("a",{href:"https://pest.rs/"}," Pest"),n(", I started implementing an MVP version of the formatter. Unfortanately the grammar of the progress language is not open source, I managed to recreate an approximate subset of the language we tend to use. ")],-1),h=e("p",null," This program in combination with merging helped improve the readability of programs that had for years been misaligned and caused confusion slowing down our changes ",-1),c=e("a",{href:"https://www.reddit.com/r/dailyprogrammer/comments/27h53e/662014_challenge_165_hard_simulated_ecology_the/"},"On reddit",-1),m=e("em",null,"muliThreaded",-1),u=e("p",null," I was often supplied with data in a consistent format the user could print and edit and needed to upload in a different format, the user often edited a file that was easy to read but more challanging to parse. I made command line tools to quickly run in vscode to convert the file in a way that could be uploaded ",-1),w=r({__name:"RustView",setup(p){return(g,f)=>(i(),s(l,null,[e("h2",{style:t(a(o)("h2"))},"A selected list of Rust project I have done",4),e("article",null,[e("h3",{style:t(a(o)("h3"))},"Formatter for the Abl Progress language",4),e("p",{style:t(a(o)("p"))}," Currently the ABL Progress langauge does not have a formatter. I noticed that most of our large programs had incosistent indenting,which made tracking branching code and procedures(functions) difficult. After spending considerable reformatting the code by hand to improve maintanability, I looked at general purpose code formatters however none of them worked with able progress",4),d,h]),e("article",null,[e("h3",{style:t(a(o)("h3"))},"Ecology",4),e("p",{style:t(a(o)("p"))},[n("As part of my learning of the rust programming language I attempted this programming challange "),c],4),e("p",{style:t(a(o)("p"))}," The short summary is make a forest that on a 2d array(chessboard like grid) and simulate the forest for 400 years. The short summary is. ",4),e("p",{style:t(a(o)("p"))},"Each square can contain",4),e("ul",null,[e("li",{style:t(a(o)("li"))},"Trees, which will be at one of these life stages, sapling, Tree or Elder",4),e("li",{style:t(a(o)("li"))},"LumberJack which will cut down mature and elder trees ",4),e("li",{style:t(a(o)("li"))},"Bears which will take out lumberJacks",4)]),e("p",{style:t(a(o)("p"))},"Each entity present has its own moving, spawning and despawning rules, with monthly changes and a yearly census ",4),e("p",{style:t(a(o)("p"))},[n("In additon to this I refactored the program so it can be optionally run "),m],4)]),e("article",null,[e("h3",{style:t(a(o)("h3"))},"Various command line tools",4),u])],64))}});export{w as default};
